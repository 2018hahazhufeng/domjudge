{% extends '@DOMJudge/team/base.html.twig' %}

{% block title %}Submit - {{ parent() }}{% endblock %}

{% block content %}

    {% if current_team_contest is empty or (not is_granted('ROLE_JURY') and not current_team_contest.freezeData.started) %}
        <div class="container submitform">
            <div class="alert alert-danger" role="alert">Contest has not yet started - cannot submit.</div>
        </div>
    {% else %}
        <main role="main" class="pl-4 pt-5">
            <div class="container submitform">
                <h1 class="text-center">Submit</h1>
                {{ form_start(form) }}
                {{ form_row(form.code) }}
                {{ form_row(form.problem) }}
                {{ form_row(form.language) }}
                <div class="form-group" data-entry-point>
                    {{ form_label(form.entry_point) }}
                    {{ form_widget(form.entry_point) }}
                    <small class="form-text text-muted">The entry point for your code.</small>
                </div>
                <div class="form-group">
                    <button type="submit" class="btn-primary btn"><i class="fas fa-cloud-upload-alt"></i> Submit
                    </button>
                </div>
                {{ form_end(form) }}
            </div>
        </main>
    {% endif %}

{% endblock %}

{% block extrafooter %}
    {% include '@DOMJudge/partials/javascript_language_detect.html.twig' %}
    <script>
        function entryPointDetectJava(filename) {
            return filename.replace(/\.[^\.]*$/, '');
        }

        function entryPointDetectKt(filename) {
            var filebase = filename.replace(/\.[^\.]*$/, '');
            if (filebase === '') return '_Kt';

            filebase = filebase.replace(/[^a-zA-Z0-9]/, '_');
            if (filebase.charAt(0).match(/^[a-zA-Z]$/)) {
                return filebase.charAt(0).toUpperCase() + filebase.slice(1) + 'Kt';
            } else {
                return '_' + filebase + 'Kt';
            }
        }

        function maybeShowEntryPoint(filename) {
            var langid = $('#submit_problem_language').val();
            if (langid === "") {
                return;
            }
            var $entryPoint = $('[data-entry-point]');
            var $entryPointLabel = $entryPoint.find('label');
            var $entryPointInput = $entryPoint.find('input');
            var entryPointDescription = getEntryPoint(langid);
            if (entryPointDescription) {
                $entryPoint.show();
            } else {
                $entryPoint.hide();
            }

            if (entryPointDescription) {
                var $labelChildren = $entryPointLabel.children();
                $entryPointLabel.text(entryPointDescription).append($labelChildren);
                $entryPointInput.attr('required', 'required');
            } else {
                $entryPointInput.attr('required', null);
            }

            if (filename) {
                switch (langid) {
                    case 'java':
                        $entryPointInput.val(entryPointDetectJava(filename));
                        break;
                    case 'kt':
                        $entryPointInput.val(entryPointDetectKt(filename));
                        break;
                    default:
                        $entryPointInput.val(filename);
                }
            }
        }

        $(function () {
            var $entryPoint = $('[data-entry-point]');
            $entryPoint.hide();

            var processFile = function () {
                var filename = $('#submit_problem_code').val();
                if (filename !== '') {
                    filename = filename.replace(/^.*[\\\/]/, '');
                    var parts = filename.split('.').reverse();
                    if (parts.length < 2) return;
                    var lcParts = [parts[0].toLowerCase(), parts[1].toLowerCase()];

                    // Problem ID

                    var problem = document.getElementById('submit_problem_problem');
                    // the "autodetect" option has empty value
                    if (problem.value !== '') {
                        return;
                    }

                    for (var i = 0; i < problem.length; i++) {
                        if (problem.options[i].text.split(/ - /)[0].toLowerCase() === lcParts[1]) {
                            problem.selectedIndex = i;
                        }
                    }

                    // language ID

                    var language = document.getElementById('submit_problem_language');
                    // the "autodetect" option has empty value
                    if (language.value !== '') return;

                    var langid = getMainExtension(lcParts[0]);
                    for (i = 0; i < language.length; i++) {
                        if (language.options[i].value === langid) {
                            language.selectedIndex = i;
                        }
                    }

                    maybeShowEntryPoint(filename);
                }
            };

            $('#submit_problem_code').on('change', processFile);
            $('#submit_problem_language').on('change', function () {
                maybeShowEntryPoint();
            });

            $('form[name=submit_problem]').on('submit', function () {
                var langelt = document.getElementById("submit_problem_language");
                var language = langelt.options[langelt.selectedIndex].value;
                var languagetxt = langelt.options[langelt.selectedIndex].text;
                var fileelt = document.getElementById("submit_problem_code");
                var filenames = fileelt.files;
                var filename = filenames[0].name;
                var probelt = document.getElementById("submit_problem_problem");
                var problem = probelt.options[probelt.selectedIndex].value;
                var problemtxt = probelt.options[probelt.selectedIndex].text;

                var error = false;
                if (language === "") {
                    langelt.focus();
                    langelt.className = langelt.className + " errorfield";
                    error = true;
                }
                if (problem === "") {
                    probelt.focus();
                    probelt.className = probelt.className + " errorfield";
                    error = true;
                }
                if (filename === "") {
                    error = true;
                }
                if (error) return false;

                var auxfileno = 0;
                // start at one; skip maincode file field
                for (var i = 1; i < filenames.length; i++) {
                    if (filenames[i].value !== "") {
                        auxfileno++;
                    }
                }
                var extrafiles = '';
                if (auxfileno > 0) {
                    extrafiles = "Additional source files: " + auxfileno + '\n';
                }
                var question =
                    'Main source file: ' + filename + '\n' +
                    extrafiles + '\n' +
                    'Problem: ' + problemtxt + '\n' +
                    'Language: ' + languagetxt + '\n' +
                    '\nMake submission?';
                return confirm(question);
            });

            processFile();
            maybeShowEntryPoint();
        });
    </script>
{% endblock %}
