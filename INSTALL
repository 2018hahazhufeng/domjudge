DOMjudge INSTALLATION INSTRUCTIONS
==================================

[doc/quick-install.txt contains a checklist as a summary of this document]


SYSTEM REQUIREMENTS
-------------------

This judging system was developed and tested on GNU/Linux systems,
specifically on Debian and CentOS (RedHat EL). We're using standard
UNIX utilities and libraries wherever possible, so this system should
be reasonably portable to other Unix systems.

The requirements for the deployment of this jury-system are:

- A TCP/IP network which connects all jury and team computers.
  Extra network security which restricts internet access and access
  to other services (ssh, mail, talk, etc..) is advisable, but not
  provided by this software. TCP/IP networking is used in a few
  different ways:
  - The 'submit' command-line client connects to the submitserver via
    a TCP connection on a configurable port.
  - The jury computers use TCP/IP connections to connect to the MySQL
    database, for copying submissions with scp (in the default
    configuration with the command-line submitdaemon).
  - HTTP traffic from teams, the public and jury to the webserver.

- One jury account with a homedirectory which is shared between all
  jury-computers (e.g. via NFS, Samba).
  
- (Local) root access on the jury-computers (preferably also on the
  shared homedirectory) for installing some programs setuid-root and
  (un)mounting the 'proc' filesystem. See 'SECURITY: ROOT PRIVILEGES'
  for more details.

- For using the command-line submit program, team accounts which are
  accessible via SSH on the jury computers (a SSH public key of the
  jury account should be installed on all team accounts to provide
  public-key access). This can be circumvented by providing access by
  other means, see below under SUBMISSION METHODS or the file
  'submit/submit_copy.sh' for more details.


CONCEPTS
--------

DOMjudge has three different kinds of hosts:
* Team computer: workstation for a team, where they develop their solutions
  and from which they submit them to the jury system. The only part of
  DOMjudge that runs here is the optional command-line submit client; the
  rest happens via the web interface.
* Jury system: a host that receives the submissions, runs the database and
  serves the webpages. This host will run the DOMjudge submitdaemon(s),
  MySQL and Apache. Optionally some of these tasks can be further split out
  to separate machines, but that's not normally necessary.
* Judgers: a number of hosts, at least one, that will retrieve submitted
  solutions from the main jury system, compile and run them and send the
  results back to the jury system. Since this is computationally intensive,
  there should ideally be at least a couple of these. They will run the
  judgedaemon from DOMjudge.


SOFTWARE REQUIREMENTS
---------------------

- gcc with standard libraries

- make

- For every supported programming language a compiler is needed;
  preferably one that can generate statically linked stand-alone
  executables.

- Apache web server with support for PHP >= 4.3.2 and the mysql
  extension for PHP.

- MySQL 3.23.x or higher database and client software

- PHP >= 4.3.2, located in /usr/bin/php (command line interface),
  also with the mysql extension.

- Bash >= 2, located in /bin/bash

- Statically compiled Bash >= 2 (included for Linux IA32)

- glibc 2.1 or higher

- A lot of standard (GNU) programs, a probably incomplete list:
	hostname, date, dirname, basename, touch, chmod, cp, mv, cat,
	grep, diff, wc, mkdir, mkfifo, mount, sleep, head, tail

- sudo

- htpasswd

- OpenSSH/SCP (or a compatible ssh/scp client/daemon, optionally
  for using the command-line submit program)

- wget (optionally for downloading LaTeX packages for documentation)


FILE LOCATIONS
--------------

There are three different directory trees which must be set up and
configured, before the beginning of a contest. The root paths of these
directory trees should be set in the main config file. (Directories in
uppercase are configuration variables, which can be set to different
locations (even within different roots, although not tested!)).

SYSTEM_ROOT
	The judging system itself is contained in this directory tree. All
	programs needed for the judging system are located here alongside
	some extra utilities and the configuration of the system.

INPUT_ROOT
	The problem input and output testdata should be put here. This
	directory-tree is for input only, so (in principle) this directory
	tree can be read-only.

	Each problem should have its own directory within INPUT_ROOT,
	where input and output testdata have to be placed.

OUTPUT_ROOT
	Placed here are all submission files, logfiles and temporary
	files, made while testing submissions. The following directories
	should be present within OUTPUT_ROOT:

	LOGDIR        contains all logfiles.
	INCOMINGDIR   contains submission files, being submitted or where
	              a submission error has occurred.
	SUBMITDIR     contains all correctly submitted files.
	JUDGEDIR      place where submissions are tested, each in its own
	              subdirectory. The system needs root access to this
	              directory! (for chroot and mounting of proc-fs).


DATABASE LAYOUT
---------------

DOMjudge uses a MySQL database server for storage of contest status
information.

The database structure and needed privileges are included in MySQL
dump files in the sql subdirectory. The default database name is
'domjudge'. This can in principle be changed manually in the
configuration and SQL files, but we recommend not to do this.

Installation of the database can be done with 'make install'. For
this, you need an installed and configured MySQL server and root
access to it. The install script also inserts some default/example
data into the 'domjudge' database.

The 'domjudge' database contains the following tables. Tables marked
with a '*' have to be manually filled with data before running a contest
(e.g. with phpMyAdmin), the other tables are used automatically by the
software:

  Name               Description

  clarification      Clarification requests/replies are stored here.
* contest            Contest definitions with start/end time.
* judger             Computers (hostnames) that function as judgers.
  judging            Judgings of submissions.
* language           Definition of allowed submission languages.
* problem            Definition of problems (name, corresponding contest, etc.)
  submission         Submissions of solutions to problems.
* team               Definition of teams.
* team_affiliation   Defintion of institutions a team can be affiliated with
* team_category      Different category groups teams can be put in.
  scoreboard_jury    Cache of the scoreboards for public/teams and for the jury
  scoreboard_public    separately, because of possibility of score freezing.

Now follows a longer description (including fields) per table, that
has to be filled manually. In general the reference ID's in each table
can be left untouched and auto incremented. These are used to
reference to a specific element from other tables and internally in
the software. For example a problem with 'cid = 2' would reference to
the contest with its 'cid' (contest ID) set to 2.

contest: The contests that the software will run. E.g. a test session
         and the live contest.
'cid' is the reference ID.
'starttime' and 'endtime' respectively are the start- and endtime of
the contest: before and after that time, no submissions are accepted.
'lastscoreupdate' is the time after which the public and team
scoreboard are not updated anymore (frozen). This is meant to make
the last stages of the contest more thrilling, because no-one knows
who has won... Setting this to 'NULL' disables this feature.
'contestname' is a descriptive name used in the interface.

judger: List here the hosts that will be autojudging the submissions.
'judgerid' is the hostname of a judger computer.
'active' should be 0 or 1 and indicates whether this host should judge
incoming submissions.

language: Programming languages in which to accept and judge submissions.
'langid' is a string of maximum length 8, which references the
language. This reference is also used to call the correct compile
script (SYSTEM_ROOT/judge/compile_c.sh, etc.), so when adding a new
language, check that these match.
'name' is the displayed name of the language.
'extension' the internally used extension for that language, which has
to match the first extension as listed in the global configuration file.
'allow_submit' (0 or 1) determines whether teams can submit using this
language.
'allow_judge' (0 or 1) determines whether judgers will judge
submissions for this problem. This can for example be set to 0 to
temporarily hold judging, when a problem occurs with the judging of
specific languages; after resolution of the problem this can be set to
1 again.
'time_factor' is the relative factor by which the timelimit is
multiplied for solutions in this language. For example Java is known
to be structurally slower than C/C++.

problem:
'probid' is the reference ID.
'cid' is the contest ID this problem is (only) defined for. A problem
cannot be used in multiple contests.
'name' is the full name of the problem.
'allow_submit' (0 or 1) determines whether teams can submit solutions
for this problem. Non-submittable problems are also not displayed on the
scoreboard. This can be used to define spare problems, which can then
be added to the contest in a second.
'allow_judge' (0 or 1) determines whether judgers will judge
submissions for this problem. See also the explanation for language.
'testdata' is the directory within INPUT_ROOT that contains the
input/output testdata in files 'testdata.in' and 'testdata.out'.
'timelimit' is the timelimit in seconds within which solutions for
this problem have to run (taking into account 'time_factor' per
language).
'special_run' if not NULL defines a custom run-script 'run_<special_run>.sh'
to run compiled submissions for this problem.
'special_compare' if not NULL defines a custom compare-script
'compare_<special_compare>.sh' to compare output for this problem.

team:
'login' is the account/login-name of the team.
'name' is the displayed name of the team.
'categoryid' is the ID of the category the team is in.
'affilid' is the affiliation ID of the team
'ipaddress' is the IP-address of the team. This is used to
automatically identify the team in the webinterface and to check
submission origin. A value of 'NULL' results in the team being unable
to submit or view it's teampage, unless they first authenticate via
password or commandline submission. It has a length of 30 to allow
for IPv6 addresses.
'passwd' is a MD5-hash of a one-time password teams can use to
authenticate and register their IP address.
'room' is the room the team is located, for display only.
'comments' should be clear.
'teampage_first_visited' is automatically updated when a team first
visits their DOMjudge team page.

team_affiliation:
'affilid' is the reference ID.
'name' is the name of the institution.
'country' is the 2 character abbreviation of the country.
'has_logo' is 0 or 1 whether the institution has a logo associated
with it.
'comments' should be clear.

team_category:
'categoryid' is the reference ID.
'name' is a string: the name of the category.
'sortorder' is the order at which this group must be sorted in the
scoreboard, where a higher number sorts lower and equal sort depending
on score.

CONFIGURATION
-------------

Configuration of the judge system is mostly done by editing the global
configuration file in SYSTEM_ROOT/etc/global.cfg. This file contains
the configuration data for all programs within the system. To
implement configuration changes, these settings should be converted to
the different language-specific configuration-files, needed by
different parts of the system. This is done by running 'make config'
in the SYSTEM_ROOT directory. After that, also all C/C++ programs
should be rebuilt to implement these changes!

The global configuration file has a ini-file like syntax, with some
extensions to make it more flexible and to be able to correctly
convert variables to all specific configuration files. See comments
there for more information.

CONFIGURATION OF LANGUAGES

Configuration of the compilers of the supported languages should be
done separately. For each supported language a bash shell-script named
'compile_<lang>.sh' should be made and placed in SYSTEM_ROOT/judge,
where <lang> is the ID of the language as specified in the
database. For more information, see for example 'compile_c.sh' and
'test_solution.sh' for syntax in SYSTEM_ROOT/judge.

Interpreted languages and non-statically linked binaries can in
principle also be used, but then the option USE_CHROOT should be
disabled (or all dependencies be added to the chroot environment).
Interpreted languages do not generate an executable and in principle
do not need a compilation step. However, to be able to use interpreted
languages (also Sun's Java), a script must be generated during the
compilation step, which will function as the executable: the script
must run the interpreter on the source. See 'compile_perl.sh' and
'compile_java_javac.sh' in SYSTEM_ROOT/judge for examples.

CONFIGURATION OF SPECIAL RUN OR JUDGE SCRIPTS

To allow for problems that do not fit within the standard scheme of
fixed input and/or output, DOMjudge has the possibility to change the
way submissions are run and checked for correctness.

The backend script (test_solution.sh) that handles the compilation,
running and checking of submissions, calls separate scripts for
running and comparison of the results. These can be specialised and
adapted to the requirements per problem. For this, one has to create
script 'run_<some-tag>.sh' and/or 'compare_<some-tag>.sh' in the
SYSTEM_ROOT/judge directory (see run.sh and compare.sh for examples
and usage information). Then one must specify this <some-tag> in the
special_run and/or special_compare fields of the problem entry in the
MySQL database (NULL means that the default script should be used).

SUBMISSION METHODS

DOMjudge supports essentially two submission methods: via the
commandline submit program and via the webinterface. From experience,
both methods have users that prefer the one above the other.

The commandline submit method does place some requirements on the
network environment however. It needs a shared filesystem or other
means for the jury to access the files on the team accounts. Site
specific adaptations can be made in 'submit/submit_copy.sh'.

When commandline submit is disabled in the configuration, the
commandline submit client/daemon will still be built, but the submit
client will now default to try to connect to the websubmit interface
using 'curl'. For this to work, 'curl' must be locally available and
in the path for the teams.

Although the commandline submit daemon is thus not strictly necessary,
it does add an advantage: it is more secure than the webinterface
because it uses a "callback" to authenticate the team (instead of IP
address authetication). Furthermore, it allows for automatic IP
address configuration with the configuration option 'STRICTIPCHECK=0',
which removes the hassle of either preconfiguring that or handing
passwords to the teams for their first authentication.


WEBSERVER CONFIGURATION

For the web interface, you need to have a webserver (e.g. Apache)
installed on the jury system and made sure that PHP correctly works
with it. Refer to the documentation of your webserver and PHP for
details.

To configure the webserver for DOMjudge, use the Apache configuration
snippet from etc/apache.conf. In that file, replace 'SYSTEM_ROOT' with
the SYSTEM_ROOT you specified in the config, i.e. where the DOMjudge
files are located. Reload the webserver for the changes to take effect.


OTHER CONFIGURATION ISSUES

For running solution programs under a non-privileged user, a user has
to be added to the system(s) that act as judger. This user does not
need a home-directory or password, so e.g. the following command would
suffice to add a user 'domtest' with minimal privileges:

useradd -d /nonexistent -g nobody -M -n -s /bin/false domtest

This user must also be configured as the user under which programs run
in SYSTEM_ROOT/etc/global.cfg.



BUILDING AND INSTALLING
-----------------------

After you have configured the system, you can start installing the
(few) components that need building and installing. This part is also
interactive, because input of system and MySQL root passwords is
needed.

In the following, all calls to 'make' should in principle be done from
the SYSTEM_ROOT directory: all relevant targets are defined in the
main 'Makefile' there and it will call subdirectory makefiles.

The system can be installed with the command 'make install' in
SYSTEM_ROOT directory. This will first run 'make config' and 'make
build' if necessary. This command is interactive: it will ask for a
few different passwords:
- a password which will be set on the jury webinterface.
- the system root password to install some programs set-uid root.
- the MySQL database root password to install the DOMjudge database.
It does also automatically generate and set passwords for the team and
public webinterface: these are only used internally in the system and
are best left untouched.

There are some files/directories that have to be readable/writeable by
the webserver. These are:
- SYSTEM_ROOT/etc/passwords.php must be readable by the webserver, but
  (best) not world readable.
- INCOMINGDIR must be writeable by the webserver to place websubmitted
  files there.

Should installation not succeed and re-installation be necessary, then
you can clean all built files with 'make clean'. 'make distclean' will
additionally also remove all traces of DOMjudge from the MySQL
database, which is needed if you want to reinstall the database!


SECURITY
--------

This judging system was developed with security as one of the main
goals in mind. To implement this rigorously in various aspects 
(restricting team access to others and the internet, restricting
access to the submitted programs on the jury computers, etc...)
requires root privileges to different parts of the whole contest
environment. Also, security measures might depend on the environment.
Therefore we have decided not to implement security measures which are
not directly related to the judging system itself. We do have some
suggestions on how you can setup external security.

CONSIDERATIONS

Security considerations for a programming contest are a bit different
from those in normal conditions: normally users only have to be
protected from deliberately harming each other. During a contest we
also have to restrict users from cooperatively communicating,
accessing restricted resources (like internet) and restrict user
programs running on jury computers.

We expect that chances are small that people are trying to cheat
during a programming contest: you have to hack the system and make use
of that within very limited time. And you have to not get caught and
disqualified afterwards. Therefore passive security measures of warning
people of the consequences and only check (or probe) things will
probably be enough.

However we wanted the system to be as secure as possible within
reason. Furthermore this software is open source, so users can try to
find weak spots before the contest.

INTERNAL SECURITY

Internal security of the system relies on users not being able to get
to any vital data (jury input/output and users' solutions). Data is
stored in two places: files on the jury account and in the SQL
database. Files should be protected by preventing permission to the
relevant directories.

Database access is protected by passwords. The default permissions allow
connections from ALL hosts, so make sure you restrict this appropriately
or choose strong enough passwords.
NOTE: database passwords are stored in SYSTEM_ROOT/etc/passwords.php.
This file has to be non-readable to teams, but has to be readable to
the webserver to let the jury webinterface work. A solution is to
make it readable to a special group the webserver runs as.

Secondly, the files submitted should not be interceptable by other
teams (even though that, if these would be sent clear-text, a team
would normally have to be root/administrator on their computer to
intercept this). By default this is accomplished by transferring these
files with ssh (and even locally on the jury-computers). See
SYSTEM_ROOT/submit/submit_copy.sh for more information.

Teams should not be able to fake the identity of another team. This is
prevented in the submission system, by making use of temporary files
in a world non-readable directory of the team account: during
submission, the file is copied there with some random part and this
file will be copied by the jury. An other team cannot guess filenames
there, so trying to send as a different team would only result in a
copying error. During submission, the IP address is also checked.
The team webinterface relies on authentication by IP address only:
this has the advantage for teams that they do not have to fill in yet
another user/password combination. Only if teams are able to spoof
their IP (for which they normally need root/administrator privileges),
then they would be able to view other teams' submission info (not their
code) and clarifications. As this gives a team little advantage, we
think that this suffices.

ROOT PRIVILEGES

A difficult issue is the securing of submitted programs run by the
jury. We do not have any control over these sources and do not want to
rely on checking them manually or filtering on things like system
calls (which can be obscured and are different per language).

Therefore we decided to tackle this issue by running these programs in
a environment as restrictive as possible. This is done by setting up a
minimal chroot environment. For this, root privileges on the judging
computers and statically compiled programs are needed. By also
limiting all kinds of system resources (memory, processes, time,
unprivileged user) we protect the system from programs which try to
hack or could crash the system.  However, a chroot environment does
not restrict network access, so there lies a possible security risk
that has to be handled separately.

EXTERNAL SECURITY

The following security issues are NOT handled by DOMjudge, but left to
the jury to set up.

Network traffic between team- and jury-computers and the internet
should be limited to what is allowed. Possible ways of enforcing this
might be: monitor traffic, modify firewall rules on team computers or
(what we implemented with great satisfaction) put all team computers
behind a firewalling router.

Solutions are run within a restricted (chroot) environment on the
judge computers. This however does not restrict network access, so a
team could try to send in a solution that tries to send input testdata
back to them, access the internet, etc... A solution to this problem
is to disallow all network traffic for the test user on the judge
computers. On Linux with kernel 2.4 and higher, this can be
accomplished by modifying the iptables, adding a rule like:

iptables -I OUTPUT -o <network_interface> -m owner --uid-owner <testuser_uid> -j REJECT


$Id$
