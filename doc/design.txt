Some notes on the design of DOMjudge
------------------------------------

This system was originally designed and developed for the 2004 Dutch
Programming Championship (NKP 2004). This file goes into some of the
backgrounds and details of its design.


Origin
------

Although there were already some jury systems around, we decided to
write our own, new system for the following reasons:
- The system used here in Utrecht was set up as a simple Perl script,
  made for local contests with fewer teams and doesn't have the
  required scalability, flexibility, security and ease of use
  necessary for a big contest.
- The systems written by other universities (Delft and Groningen) are
  nice, but have some disadvantages. First of all, the advantage of
  writing your own system, is that you know all its inside
  functioning, which might come in handy when problems arise during
  the contest. Studying and adapting other systems to our
  environment will probable take (almost) as much time as writing
  our own system and therefore we chose the last option.
  Specific reasons why we chose not to use the existing systems:
  - The Delft system (SZP) is a very complex system, consisting of
    more than 19.000 lines of C/C++ code. Also it implements complex
    communication and authentication protocols. However it works great
    and has good documentation!
  - The Groningen system (Iudex) is a much simpler system based on
    Python and a database. It handles communication via mail.
    Because we had no/little experience with Python and this system
    seemed not to have many security and rejudging features, we didn't
    choose for this system. 
  - The ACM PC^2 system is a self-contained system, which is easy to
    setup, but closed source, so not adaptable. Experience with the
    system from team and jury side leads to the conclusion that the
    interface requires a lot of manual control.


Goals
-----

For the design of this system, the main goals are:
- security:
	Although not very likely to happen, we want to detect fraud as
	much as possible. This is a judging system, so it focuses on
	security concerning attempts to submit code that tries to hack the
	jury system. It is difficult to detect malicious code, because this
	differs per language. Therefore we have chosen to secure the system
	by running compiled programs in a restricted environment.
- flexibility:
	- It should be easy to rejudge individual solutions or all solutions
	  for a particular language, problem, etc...
	- Addition of new languages should be easy and pluggable.
- simplicity:
	The system should kept as simple as possible, given the necessary
	security and flexibility requirements. We try to reach this by
	using as much standard utilities as possible. This also reduces
	the chances on bugs.


$Id$
