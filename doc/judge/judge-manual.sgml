<!doctype linuxdoc system>
<!--
 $Id$

 DOMjudge Judger's Manual
 This manual is part of the DOMjudge Programming Contest Jury System.
 Copyright (c) 2004-2007 The DOMjudge Developers

 DOMjudge is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 DOMjudge is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with DOMjudge; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 02110-1301, USA
-->
<book>

<title>DOMjudge Judger's Manual
<author>by the DOMjudge team
<date>$Date$

<abstract>
This document provides information about DOMjudge aimed at a judger
operating the system during the contest. It provides information
about viewing and checking submissions and working with clarification
requests.

A separate manual is available for teams and administrators.

Document version: $Rev$
</abstract>

<toc>

<chapt>DOMjudge Overview
<p>

DOMjudge is a system for running a programming contest, like the ACM
regional and world championship programming contests.

This means that teams are on-site and have a fixed time period (mostly
5 hours) and one computer to solve a number of problems (mostly 6-10).
Problems are solved by writing a program in one of the allowed
languages, that reads input according to the problem input
specification and writes the correct, corresponding output.

The judging is done by submitting the source code of the solution to
the jury. There the jury system automatically compiles and runs the
program and compares the program output with the expected output.

This software can be used to handle the submission and judging during
such contests. It also handles feedback to the teams and communication
on problems (clarification requests). It has webinterfaces for the
jury, the teams (their submissions and clarification requests) and the
public (scoreboard).

<sect>Features
<p>

A global overview of the features that DOMjudge provides:

<itemize>
<item>Automatic judging with distributed (scalable) judge hosts
<item>Webinterface for portability and simplicity
<item>Modular system for plugging in languages/compilers
<item>Detailed jury information (submissions, judgings) and options
      (rejudge, clarifications)
<item>Designed with security in mind
<item>Has been used in live contests
<item>Open Source, Free Software
</itemize>


<sect>Copyright and licencing
<p>

DOMjudge was developed by Thijs Kinkhorst, Peter van de Werken and
Jaap Eldering at Study Association <htmlurl name="A-Eskwadraat"
url="http://www.a-eskwadraat.nl/">, <htmlurl name="Utrecht University"
url="http://www.uu.nl/">, The Netherlands.

It is Copyright (c) 2004 - 2007 by The DOMjudge Developers.

DOMjudge, including its documentation, is free software; you can redistribute
it and/or modify it under the terms of the <url name="GNU General Public License"
url="http://www.gnu.org/copyleft/gpl.html"> as published by the Free Software
Foundation; either version 2, or (at your option) any later version. See the
file COPYING.

Additionally, parts of this system are based on other programs, which
are covered by other copyrights. This will be noted in the files
themselves. Files (partly) covered by other copyrights are:
<itemize>
<item> bin/runguard.c is covered by the IBM public license.
<item> lib/mkstemps.h and lib/basename.h are covered by the GNU Lesser
Public License. See COPYING.lgpl.
</itemize>  

This software is partly based on code by other people. These
acknowledgements are made in the respective files, but we would like
to name them here too:

<itemize>
<item> runguard.c is based on timeout from The Coroner's Toolkit
by Wietse Venema.
<item> beep.c is made by Johnathan Nightingale.
<item> bash is included from the Debian `bash-static' (i386) package
(copyright Free Software Foundation).
<item> tempfile.c is included from the Debian `debianutils' package.
<item> mkstemps.h and basename.h are modified versions from the
GNU libiberty library (copyright Free Software Foundation).
<item> lib.database.php by Jeroen van Wolffelaar et al.
<item> submit.c and submitdaemon.c are based on submit.pl and
submitdaemon.pl by Eelco Dolstra.
<item> The DOMjudge logo is based on the NKP 2004 logo made by
Erik van Sebille.
</itemize>

<sect>Contact
<p>
The DOMjudge homepage can be found at:
<htmlurl name="http://domjudge.sourceforge.net/"
url="http://domjudge.sourceforge.net/">

The authors can be reached at the following address:
<htmlurl name="domjudge@a-eskwadraat.nl"
url="mailto:domjudge@a-eskwadraat.nl">

<chapt>General
<p>


<sect>Scoreboard
<p>
The scoreboard, as the most important view on the contest, can be configured in quite
some ways.

Nearly everything on the scoreboard can be clicked to reveal more detailed information
about the item in question: team names, specific solutions and problem headers.

<chapt>Before the contest
<p>
Before the contest starts, a number of things will need to be configured.
The contest start- and end time, the time at which the scoreboard will be frozen
and unfrozen, the problem set(s) and time limits.



<sect>Practice Session
<p>
If your contest as a test session or practice contest, use it also as a general rehearsal
of the jury system: judge test submissions as you would do during the real contest and
answer incoming clarification requests.


<chapt>During the contest
<p>

<sect>Monitor teams
<p>
Under the Teams menu option, you can get a general impression of the status of each team:
a traffic light will show either of the following:
<itemize>
<item>gray: the team has not connected to the web interface at all;
<item>red: the team has connected but not submitted anything yet;
<item>yellow: one or more submissions have been made, but none correct;
<item>green: the team has submitted at least one solution that has been judged as correct.
</itemize>

This is especially useful during the practice session, where it is expected that every
team can make at least one correct submission. A team with any other colour near the end
of the session might be having difficulties.
 

<sect>Judging Submissions
<p>

<sect1>Solution flow
<p>

The flow of an incoming submission is as follows.

<enumerate>
<item>Team submits solution. It will either be rejected after basic checks,
or accepted and stored.
<item>The first available autojudger compiles, runs and checks the solution.
The outcome and outputs are stored.
<item>If verification is not required, the team views the result and the
scoreboard is updated. A judge can inspect it.
<item>If verification is required, a judge inspects the solution. Only
after it has been approved will the result be visible outside the jury room.
</enumerate>

<sect1>Solution status codes
<p>
The interface for jury and teams shows the status of a solution with a code.

<itemize>
<item>QUEUED: solution accepted and awaiting an autojudger to process it *;
<item>JUDGING: an autojudger is currently compiling/running/testing the solution *;
<item>TOO-LATE: solution accepted but submitted after the contest ends;
<item>CORRECT: solution correct, problem solved;
<item>COMPILER-ERROR: the compiler gave an error while compiling the program;
<item>TIMELIMIT: program execution time exceeded the time defined for the problem;
<item>RUN-ERROR: a kind of problem while running the program occured, for example
  segmentation failt, devision by zero or exitcode unequal to 0.
<item>NO-OUTPUT: there was no output at all from the program;
<item>WRONG-ANSWER: the output of the program did not exactly match the expected output;
</itemize>

Under the Submissions menu, you can see all submitted solutions, with the newest one
at the top. Click on a submission id (a number starting with <em>s</em>, e.g. s123) for more details
about the submission (team name, submittime etc) and the judgings for it.
Click on a result code to jump straight to the judging details (runtime, 
outputs, diff with testdata, diff with previous solution).

A submission can have multiple judgings, but only one valid one at any time. Multiple judgings
happen with rejudging, see below <!-- LINK ME -->.


<sect1>Rejudging
<p>
In some situations it is necessary to rejudge a submitted solution. This means that
the solution will re-enter the flow as if it had not been judged before. The submittime
will be the original time, but the program will be compiled, run and tested again.

This can be useful when there was some kind of problem: a compiler that was broken and
later fixed, or test data that was incorrect and later changed. When a submission is
rejudged, the old judging data is kept but marked as "invalid".

You can rejudge a single submission by pressing the Rejudge button when viewing the
submission details. It is also possible to rejudge all submissions for a given language,
or for a given problem.

Teams will not get explicit notification of rejudgings, other than a potentially changed
outcome of their solution. It might be desirable to combine rejudging with a clarification
to the team or all teams explaining what has been rejudged and why.

<sect>Clarification Requests
<p>
Communication between teams and jury happens through Clarification Requests. Everything
related to that happens under the Clarifications menu item.

<p>
Teams can use their web interface to send a clarification request to the jury. The jury
can send a response to that team specifically, or send it to all teams. The latter is
done to ensure that all teams have the same information about the problem set. The jury
can also send a clarification that does not correspond to a specific request. These will
be termed "general clarifications".

<p>
Under Clarifications, three lists are shown: new clarifications, answered clarifications
and general clarfications. It lists the team login, the time and an excerpt. Click the
excerpt for details about that clarification request.

<p>
Every incoming clarification request will initially be marked as unanswered. The menu
bar shows the number of unanswered requests. A request will be marked as answered when
a response has been sent. Additionally it's possible to mark a clarification request
as answered with the button that can be found when viewing the request. The latter
can be used when the request has been dealt with in some other way, for example by sending
a general message to all teams.

<p>
Answering a clarification request happens by putting the text in the input box under the
request text. The original text is quoted. You can choose to either send it to the team
that requested the clarification, or to all teams. In the latter case, make sure you phrase
it in such a way that it's understandable by itself, since the other teams do not know what
the original question was.

<p>




<chapt>After the contest
<p>
Once the contest is over, the system will still accept submissions but will not judge
them anymore. Teams will see this as a "too-late" response.
<p>
If the scoreboard was frozen, it will remain frozen until the time set as unfreeze time,
as seen under Contests. It is possible to publish the final standings at any given moment
by pressing the "unfreeze scoreboard now" button under contests.
<p>
There's not much more to be done after the contest has ended. The administrator will need
to take care of backing up all system data and submissions, and the awards ceremony can start.


</book>
