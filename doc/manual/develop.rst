Development
===========

.. _API:

API
```
DOMjudge comes with a fully featured REST API. It is based on the
`CCS Contest API specification
<https://clics.ecs.baylor.edu/index.php?title=Contest_API>`_
to which some DOMjudge-specific API endpoints have been added. Full documentation
on the available API endpoints can be found at
`http(s)://yourhost.example.edu/domjudge/api/doc`.

DOMjudge also offers an
`OpenAPI Specification ver. 2
<https://swagger.io/docs/specification/2-0/basic-structure/>`_
compatible JSON file, which can be found at
`http(s)://yourhost.example.edu/domjudge/api/doc.json`.


Bootstrapping from Git repository sources
`````````````````````````````````````````
The installation steps in this document assume that you are using a
downloaded tarball from the DOMjudge website. If you want to install
from Git repository sources, because you want to use the bleeding edge
code or consider to send a patch to the developers, the
configure/build system first has to be bootstrapped.

This requires the GNU autoconf/automake toolset to be installed,
and various tools to build the documentation.

On Debian(-based) systems, the following apt command should
install the additionally required packages::

  sudo apt install autoconf automake \
    python3-sphinx python3-sphinx-rtd-theme \
    texlive-latex-recommended texlive-latex-extra \
    texlive-fonts-recommended texlive-lang-european

When this software is present, bootstrapping can be done by running
``make dist``, which creates the ``configure`` script,
downloads and installs the PHP dependencies via composer and
generates documentation from RST/LaTeX sources.

Maintainer mode installation
````````````````````````````
DOMjudge provides a special maintainer mode installation.
This method does an in-place installation within the source
tree. This allows one to immediately see effects when modifying
code.

This method requires some special steps which can most easily
be run via makefile rules as follows::

  sudo apt install acl
  make maintainer-conf [CONFIGURE_FLAGS=<extra options for ./configure>]
  make maintainer-install

Note that these targets have to be executed *separately* and
they replace the steps described in the chapters on installing
the DOMserver or Judghost.

While working on DOMjudge, there are some things to note about setting
environments. There are three environment-related files that are of importance:

* ``.env``: this file is checked into Git and contains defaults.
* ``.env.local``: this file is not checked into Git and can contain
  local overrides. This is the place where you should put your database
  configuration and whether you want to run in development or production
  mode.
* ``.env.local.php``: this file can be generated by running
  ``composer symfony:dump-env prod`` (or ``dev``) and speeds up loading
  the environment. Normally you don't need this while developing. If this
  file exists while you are developing, you can safely remove it.

To run in development mode, make sure ``APP_ENV=dev`` is in the ``.env.local``
file. To run in production mode, comment ouit that line (since ``.env`` defaults
to production mode). The database URL should also exist in ``.env.local``, but
it will be added by the Makefile automatically, so you should not have to
do this manually.

The file ``.env.test`` (and ``.env.test.local`` if it exists) are loaded
when you run the unit tests. You can thus place any test-specific settings
in there.

Makefile structure
``````````````````
The Makefiles in the source tree use a recursion mechanism to run make
targets within the relevant subdirectories. The recursion is handled
by the ``REC_TARGETS`` and ``SUBDIRS`` variables and the
recursion step is executed in ``Makefile.global``. Any target
added to the ``REC_TARGETS`` list will be recursively called in
all directories in ``SUBDIRS``. Moreover, a local variant of the
target with ``-l`` appended is called after recursing into the
subdirectories, so recursion is depth-first.

The targets ``dist, clean, distclean, maintainer-clean`` are
recursive by default, which means that these call their local
``-l`` variants in all directories containing a Makefile. This
allows for true depth-first traversal, which is necessary to correctly
run the ``*clean`` targets: otherwise e.g. ``paths.mk`` will
be deleted before subdirectory ``*clean`` targets are called that
depend on information in it.


